[{"name":"app.R","content":"# Panggil paket yang diperlukan ----\r\nlibrary(shiny)\r\nlibrary(gridExtra)\r\nlibrary(tidyverse)\r\n\r\n# Buat UI ----\r\n\r\nui <-shinyUI(fluidPage(\r\n  \r\n  titlePanel(\"Teorema Limit Pusat untuk Proposi\",\r\n             windowTitle = \"TLP untuk Proporsi\"),\r\n  \r\n  sidebarPanel(\r\n    wellPanel(\r\n      sliderInput(\"n\", \r\n                  \"Ukuran sampel:\", \r\n                  value = 200,\r\n                  min = 2, \r\n                  max = 1000),\r\n      br(),\r\n      \r\n      sliderInput(\"p\", \r\n                  \"Proporsi populasi:\", \r\n                  value = .5,\r\n                  step = .01,\r\n                  min = 0, \r\n                  max = 1),\r\n      br(),\r\n      \r\n      sliderInput(\"k\", \r\n                  \"Banyak sampel:\", \r\n                  value = 100,\r\n                  min = 10, \r\n                  max = 1000)\r\n    ),\r\n    \r\n    helpText(a(href=\"https://github.com/ydkristanto/apl-tlp-prop\",\r\n               target=\"_blank\", \"Lihat kode sumber\"))\r\n    \r\n  ),\r\n  \r\n  mainPanel(\r\n    \r\n    tabsetPanel(type = \"tabs\",\r\n                tabPanel(\"Distribusi Populasi\",\r\n                         br(),\r\n                         plotOutput(\"pop.dist\", height = \"450px\")),\r\n                tabPanel(\"Beberapa Sampel\",\r\n                         br(),\r\n                         br(),\r\n                         plotOutput(\"sample.dist\"),\r\n                         br(),\r\n                         div(h3(textOutput(\"num.samples\")),\r\n                             align =\"center\")),\r\n                tabPanel(\"Distribusi Sampling\",\r\n                         plotOutput(\"sampling.dist\"),\r\n                         div(textOutput(\"plot.descr\"),\r\n                             align = \"center\"),\r\n                         br(),\r\n                         fluidRow(column(8, br(), br(),\r\n                                         div(textOutput(\"CLT.descr\"),\r\n                                             align = \"justify\"), br()),\r\n                                  column(4, br(),\r\n                                         plotOutput(\"pop.dist1\",\r\n                                                    height = \"200px\")))),\r\n                \r\n                tabPanel(\r\n                  title = \"Informasi\",\r\n                  # Informasi aplikasi ----\r\n                  h2(\"Informasi Aplikasi\"),\r\n                  div(p(\"Tujuan aplikasi Shiny ini adalah untuk mendeskripsikan Teorema\r\n          Limit Pusat untuk proporsi. Berdasarkan teorema ini, ketika\r\n          ukuran sampelnya besar (banyak gagal atau suksesnya minimal 10), \r\n          distribusi sampling proporsinya mendekati\r\n          normal dengan rerata yang sama dengan proporsi populasinya dan \r\n          simpangan baku yang sama dengan akar kuadrat dari hasil kali \r\n          proporsi populasi dan satu dikurangi proporsi tersebut, kemudian \r\n          dibagi dengan ukuran sampelnya, yang dapat dinyatakan seperti \r\n                        berikut.\"),\r\n                      align = \"justify\"),\r\n                  div(withMathJax(p(\"$$SE = \\\\sqrt{\\\\frac{p(1-p)}{n}}$$\"))),\r\n                  div(p(\"Aplikasi ini merupakan bentuk modifikasi (atau \r\n          lebih tepatnya terjemahan) dari\",\r\n                        a(\"aplikasi serupa\", href = \r\n                            \"https://openintro.shinyapps.io/CLT_prop/\",\r\n                          target = \"_blank\"),\r\n                        \"yang dikembangkan oleh Mine Ã‡etinkaya-Rundel. \r\n          Pengembang aplikasi ini adalah\",\r\n                        a(\"Yosep Dwi Kristanto,\", href = \"https://people.usd.ac.id/~ydkristanto/\", target = \"_blank\"), \"seorang dosen dan peneliti di \r\n            program studi \", a(\"Pendidikan Matematika,\", href = \"https://usd.ac.id/s1pmat\", target = \"_blank\"), a(\"Universitas Sanata Dharma,\", href = \"https://www.usd.ac.id/\", target = \"_blank\"), \"Yogyakarta.\"), align = \"justify\"),\r\n                  div(p(\"Aplikasi ini dikembangkan dengan menggunakan bahasa \r\n                        pemrograman\", a(\"R\", href = \"https://www.R-project.org/\", target = \"_blank\"), \"dan paket\", a(\"Shiny.\", href = \"https://CRAN.R-project.org/package=shiny\", target = \"_blank\"), \"Selain itu, paket\", a(\"shinylive\", href = \"https://posit-dev.github.io/r-shinylive/\", target = \"_blank\"), \"juga digunakan untuk mengekspor aplikasi Shiny tersebut agar dapat dibuka di web statis.\")),\r\n                  hr()\r\n                )\r\n                \r\n    )\r\n  )\r\n))\r\n\r\n# Buat fungsi peladen ----\r\nseed = as.numeric(Sys.time())\r\n\r\nserver <- shinyServer(function(input, output) {\r\n  \r\n  rand_draw = function(n, p) \r\n  {\r\n    vals = NULL\r\n    vals = do.call(rbinom, list(n = n, size = 1, prob = p))      \r\n    return(vals)\r\n  }\r\n  \r\n  rep_rand_draw = repeatable(rand_draw)  \r\n  \r\n  parent = reactive({\r\n    n = 1e5\r\n    return(rep_rand_draw(input$n, input$p))\r\n  })\r\n  \r\n  samples = reactive({\r\n    pop = parent()\r\n    n = input$n\r\n    k = input$k\r\n    return(replicate(k, sample(pop, n, replace = TRUE)))\r\n  })\r\n  \r\n  ## plot 1 ----\r\n  output$pop.dist = renderPlot({\r\n    popsize = 1000\r\n    counts = data.frame(number = c(\"0\",\"1\"),\r\n                        freq = c(popsize * (1 - input$p),\r\n                                 popsize * input$p) / popsize)\r\n    ggplot(counts, aes(x = number, y = freq, fill = factor(number))) +\r\n      geom_bar(stat = \"identity\") +\r\n      labs(x = \"\", y = \"Frekuensi Relatif\",\r\n           title = paste0(\"Distribusi populasi: p = \", input$p),\r\n           size = 14, face = \"bold\") +\r\n      scale_y_continuous(limits = c(0, 1)) +\r\n      scale_fill_brewer(palette = \"Dark2\") +\r\n      theme_bw(base_size = 16) +\r\n      theme(legend.position = \"none\")\r\n  })\r\n  \r\n  ## plot 2 ----\r\n  output$sample.dist = renderPlot({ \r\n    \r\n    x = samples()\r\n    \r\n    plot <- list()\r\n    \r\n    for(i in 1:8){\r\n      df <- tibble(obs = x[,i])\r\n      counts <- df %>% count(obs)\r\n      \r\n      \r\n      plot[[i]] <- ggplot(counts, aes(x = obs, y = n, fill = factor(obs))) +\r\n        geom_bar(stat = \"identity\") +\r\n        scale_y_continuous(limits = c(0, 1.2 * max(counts$n))) +\r\n        scale_x_discrete(limits = c(0, 1)) +\r\n        scale_fill_brewer(palette = \"Dark2\") +\r\n        theme_bw(base_size = 12) +\r\n        theme(legend.position = \"none\") +  \r\n        labs(x = \"\",  y = \"Frekuensi\",\r\n             title = paste(\"Sampel\",i), size = 14, face = \"bold\")\r\n      \r\n      mean_samp = round(mean(x[,i]),2)\r\n      \r\n      sd_samp = round(sd(x[,i]),2)\r\n      \r\n      y_pos = max(counts$n) + 0.07 * max(counts$n)\r\n      \r\n      \r\n      # #added if statement to check if count 1 or count 2 are NA. this check\r\n      # #eliminated the error messages in the app\r\n      \r\n      if(!is.na(counts$n[1]) & !is.na(counts$n[2])) {\r\n        if(counts$n[1] > counts$n[2]) {\r\n          plot[[i]] <- plot[[i]] +\r\n            annotate(\"text\", x = 1, y = y_pos,\r\n                     label = paste(\"p_topi =\",\r\n                                   bquote(.(mean_samp))),\r\n                     color =\"black\", size = 3) \r\n        }\r\n        else {\r\n          plot[[i]] <- plot[[i]] +\r\n            annotate(\"text\", x = 0, y = y_pos,\r\n                     label = paste(\"p_topi =\" ,\r\n                                   bquote(.(mean_samp))),\r\n                     color = \"black\", size = 3) \r\n        }}\r\n      else {\r\n        plot[[i]] <- plot[[i]] +\r\n          annotate(\"text\", x = 0.5, y = y_pos,\r\n                   label = paste(\"p_topi =\" , bquote(.(mean_samp))),\r\n                   color = \"black\", size = 3)\r\n      }\r\n    }\r\n    grid.arrange(plot[[1]], plot[[2]], plot[[3]], plot[[4]],\r\n                 plot[[5]], plot[[6]], plot[[7]], plot[[8]],\r\n                 ncol = 4)\r\n  })\r\n  \r\n  # text\r\n  output$num.samples = renderText({\r\n    k = input$k\r\n    paste0(\"... dan seterusnya sampai sampel ke-\", k,\".\")\r\n  })\r\n  \r\n  # plot 3\r\n  output$pop.dist1 = renderPlot({\r\n    popsize = 1000\r\n    counts = data.frame(number = c(\"0\",\"1\"),\r\n                        freq = c(popsize * (1 - input$p),\r\n                                 popsize * input$p) / popsize)\r\n    \r\n    \r\n    ggplot(counts, aes(x = number, y = freq, fill = factor(number))) +\r\n      geom_bar(stat = \"identity\") +\r\n      labs(x= \"\",  y = \"Relative Frequency\",\r\n           title = paste0(\"Population distribution: p = \", input$p),\r\n           size = 8, face=\"bold\") +\r\n      scale_y_continuous(limits= c(0, 1)) +\r\n      scale_fill_brewer(palette = \"Dark2\") +\r\n      theme_bw(base_size = 8) +\r\n      theme(legend.position = \"none\")\r\n  })\r\n  \r\n  \r\n  output$sampling.dist = renderPlot({\r\n    n = input$n\r\n    p = input$p\r\n    k = input$k\r\n    pop = parent()\r\n    ndist = tibble(means = colMeans(samples()))\r\n    \r\n    ndens = density(ndist$means)\r\n    nhist = hist(ndist$means, plot = FALSE)\r\n    \r\n    m_samp = round(mean(ndist$means), 2)\r\n    sd_samp = round(sd(ndist$means), 2)\r\n    sd_teor = sqrt(p * (1 - p) / n)\r\n    \r\n    x_range = max(ndist$means) - min(ndist$means)\r\n    y_pos = max(ndens$y) - 0.1*max(ndens$y)\r\n    x_pos = if_else(m_samp > 0, min(ndist$means) + 0.1*x_range, max(ndist$means) - 0.1*x_range)\r\n    \r\n    # minor change in the way the title is displayed\r\n    \r\n    ggplot(ndist, aes(x = ndist$means)) +\r\n      geom_histogram(aes(y = after_stat(density)),\r\n                     bins = 20, color =\"white\") +\r\n      stat_density(geom = \"line\", size = 1) +\r\n      labs(title = paste(\"Distribusi sampling proporsi*:\"),\r\n           x = \"Proporsi sampel\",\r\n           y = \"\") +\r\n      annotate(\"text\", x = x_pos, y = y_pos,\r\n               label = paste(\"rerata p_topi\",\"=\", bquote(.(m_samp)),\"\\n\", \"SD p_topi \", \"=\", bquote(.(sd_samp))),\r\n               color = \"black\", size = 5) +\r\n      theme_bw(base_size = 17) \r\n  })\r\n  \r\n  # text\r\n  output$plot.descr = renderText({\r\n    n = input$n\r\n    p = input$p\r\n    k = input$k\r\n    \r\n    paste(\"*Distribusi proporsi \", k, \r\n          \" sampel acak, masing-masing\\nmemuat \", n, \r\n          \" observasi dari populasi\", sep = \"\")\r\n    \r\n  })\r\n  \r\n  # text\r\n  output$CLT.descr = renderText({\r\n    \r\n    n = input$n ; p = input$p ; q = 1-p\r\n    \r\n    pop = parent()\r\n    m_pop =  p\r\n    \r\n    n = input$n\r\n    se=round(sqrt(p*(1-p)/n),4)\r\n    \r\n    paste(\"Berdasarkan Teorema Limit Pusat (TLP), distribusi sampling proporsi mendekati normal. Rerata distribusi sampling tersebut kurang lebih p (\", m_pop, \") dan galat bakunya (simpangan baku proporsi sampel) bernilai kurang lebih sama dengan akar kuadrat peluang sukses (p) dikali dengan peluang gagal (1 - p) dibagi dengan ukuran sampel (sqrt(\", p, \"*\", q,\r\n          \"/\",n, \") =\", se,\").\", sep = \"\")\r\n    \r\n  })\r\n  \r\n  \r\n})\r\n\r\n# Membuat objek aplikasi Shiny ----\r\nshinyApp(ui = ui, server = server)","type":"text"}]
